{"version":3,"sources":["LoginModal.js","users.js","messages.js","Compose.js","App.jsx","reportWebVitals.js","index.js"],"names":["LoginModal","props","_updatePath","path","updatePath","updateMToken","mtoken","console","log","updateMessageToken","updateSToken","stoken","updateLState","logged","updateLoggedState","submit","username","password","undefined","length","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","e","currentTarget","readyState","status","data","JSON","parse","responseText","messageToken","message_token","streamToken","stream_token","send","server","state","bind","updateStreamToken","type","name","onChange","target","value","onClick","Component","Users","messages","this","users","map","u","id","Messages","Componse","_updateToken","token","sendMessage","message","onload","_newToken","getResponseHeader","inputReference","current","changeToken","React","createRef","ref","onKeyUp","key","keyCode","App","date_format","timestamp","date","Date","toLocaleDateString","toLocaleTimeString","setState","Logged","startStream","updateServer","EventSource","addEventListener","event","Array","from","Set","concat","data1","data3","created","user","filter","item","event_message","new_message","close","connected","toRender","Compose","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55ca6325.chunk.js","sourcesContent":["import {Component} from 'react'\nimport App from \"./App\";\nimport styles from './App.css';\n\nclass LoginModal extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            username: '',\n            password: ''\n        }\n        console.log(\"Constrcutor LoginModal\")\n        this.server = ''\n        this.username = ''\n        this.password = ''\n\n        this.updateMToken = this.props.updateMessageToken.bind(this)\n        this.updateSToken = this.props.updateStreamToken.bind(this)\n        this.updateLState = this.props.updateLoggedState.bind(this)\n        this._updatePath = this.props.updatePath.bind(this)\n    }\n\n    _updatePath = (path) => {\n        this.props.updatePath()\n    }\n\n    updateMToken = (mtoken) => {\n        console.log(\"updateMToken\")\n        this.props.updateMessageToken(mtoken)\n    }\n\n    updateSToken = (stoken) => {\n        console.log(\"updateSToken\")\n        this.props.updateMessageToken(stoken)\n    }\n\n    updateLState = (logged) => {\n        console.log(\"updateLState\")\n        this.props.updateLoggedState(logged)\n    }\n\n\n\n    submit = (path, username, password) => {\n        if (\n            path === null ||\n            path === undefined ||\n            path.length < 1 ||\n            username === null ||\n            username === undefined ||\n            username.length < 1 ||\n            password === null ||\n            password === undefined ||\n            password.length < 1\n        ) {this.updateLState(false)}\n\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", path+'/login', true);\n\n        //Send the proper header information along with the request\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n        xhr.onreadystatechange = (e) =>{ // Call a function when the state changes.\n            if (e.currentTarget.readyState != 4) return;\n            if (e.currentTarget.status === 201) {\n                // Request finished. Do processing here.\n                const data = JSON.parse(e.currentTarget.responseText);\n                let messageToken = data.message_token;\n                let streamToken = data.stream_token;\n                console.log(\"Looking good\")\n                this._updatePath(path)\n                this.updateSToken(streamToken)\n                this.updateMToken(messageToken)\n                this.updateLState(true)\n            }\n        }//.bind(this)\n        xhr.send(\"username=\"+username+\"&password=\"+password);\n        console.log(this.server,this.username,this.password)\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h3> Login Page</h3>\n                    <label>\n                        Server:\n                        <input type=\"text\" name=\"server\" onChange={(e) => this.server = e.target.value}/>\n                    </label>\n                    <br></br>\n                    <label>\n                        username:\n                        <input type=\"text\" name=\"username\"onChange={(e) => this.username = e.target.value} />\n                    </label>\n                     <br></br>\n                    <label>\n                        password:\n                        <input type=\"text\" name=\"password\" onChange={(e) => this.password = e.target.value} />\n                    </label>\n                    <br></br>\n                    <input type=\"submit\" value=\"Submit\" onClick={(e)=>this.submit(this.server, this.username, this.password)}/>\n            </div>\n        )\n    }\n}\n\nexport default LoginModal;","import {Component} from 'react'\nimport App from \"./App\";\nimport styles from './App.css';\n\nclass Users extends Component {\n    constructor(props) {\n        super(props)\n        console.log(\"USERS CONSTRUCTION\")\n    }\n    render() {\n        var messages = this.props.users.map(u=>u)\n\n\n        return (\n            <div id=\"user_list_style\">\n                <h3> User List</h3>\n                <ul>\n                    {messages}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Users;","import {Component} from 'react'\nimport App from \"./App\";\nimport styles from './App.css';\n\nclass Messages extends Component {\n    constructor(props) {\n        super(props)\n        console.log(\"messages CONSTRUCTION\")\n        console.log(this.props.messages)\n    }\n    render() {\n        //var message = this.props.messages.map(u=>u)\n        return (\n\n            <div id=\"chat_box_style\">\n                <h3> Message List</h3>\n                <ul id=\"messages\">\n                    {this.props.messages}\n\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Messages;","import React , {Component} from 'react'\n\nimport App from \"./App\";\nimport styles from './App.css';\n\nclass Componse extends Component {\n    constructor(props) {\n        super(props)\n        console.log(\"COMPOSE CONSTRUCTION\")\n        console.log(this.props.message_token)\n\n        this._updateToken = this.props.changeToken.bind(this)\n        this.inputReference = React.createRef()\n    }\n\n    _updateToken = (token) => {\n        this.props.updateMessageToken(token)\n    }\n\n    sendMessage = message => {\n        console.log(message)\n        if (!message) return\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", this.props.path+'/message', true);\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        xhr.setRequestHeader('Authorization', \"Bearer \"+this.props.token)\n        xhr.send(\"message=\"+this.message)\n\n        xhr.onload = function () {\n            if (xhr.status ===201){\n                let _newToken = xhr.getResponseHeader('Token')\n                this._updateToken(_newToken)\n                console.log(this.inputReference.current)\n                // this.inputReference.current = ''\n            } else {\n                console.log(\"Something wrong while sending message\")\n            }\n        }.bind(this)\n    }\n    render() {\n        return (\n            <div id=\"chat_compose_style\">\n                <label>\n                    Send :\n                    <input type=\"text\" name=\"compose\" ref ={this.inputReference}\n                           onChange={(e) => this.message = e.target.value}\n                           onKeyUp={(e) => {\n                               if (e.key === 'Enter' || e.keyCode === 13) {\n                                   this.sendMessage(this.message)\n                                   e.target.value = ''\n                               }\n                           }}\n                    />\n                </label>\n            </div>\n        )\n    }\n}\n\nexport default Componse;","import { Component } from \"react\";\nimport \"./App.css\";\nimport LoginModal from './LoginModal'\nimport Users from \"./users\";\nimport Messages from \"./messages\"\nimport Compose from \"./Compose\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message_token: \"\",\n      stream_token: \"\",\n      path: \"\",\n      server: null,\n      messages: [],\n      connected: false,\n      users: [],\n      Logged: false\n    }\n\n\n  }\n\n   date_format = (timestamp) => {\n        var date = new Date(timestamp * 1000);\n        return date.toLocaleDateString(\"en-US\") + \" \" + date.toLocaleTimeString(\"en-US\");\n    }\n\n  updateMessageToken = message_token => {\n    this.setState({message_token: message_token})\n  }\n\n  updateStreamToken = stream_token => {\n    this.setState({stream_token: stream_token})\n  }\n\n  updateLoggedState = value => {\n    this.setState({Logged: value})\n    if (value){\n      this.startStream()\n    }\n    console.log(\"CALLINGG\")\n  }\n\n  updateServer = server => {\n    this.setState({server: server})\n  }\n\n  updatePath = path => {\n    this.setState({path: path})\n  }\n\n\n  date_format = timestamp => {\n    var date = new Date(timestamp * 1000)\n    return (\n        date.toLocaleDateString('en-US') + ' ' + date.toLocaleTimeString('en-US')\n    )\n  }\n\n  startStream = () => {\n    this.server = new EventSource(\n        this.state.path + 'stream/' + this.state.stream_token\n    )\n\n    this.server.addEventListener(\n        'Users',\n        event => {\n          console.log(\"USERS EVEnt\")\n          let data = JSON.parse(event.data)\n          this.setState({\n            users: Array.from(new Set (this.state.users.concat(data.users))).map(u => <li>{u}</li>)\n          })\n        },\n        false\n    )\n\n    this.server.addEventListener(\n        'Join',\n        event => {\n            console.log(\"USERS EVEnt\")\n            let data1 = JSON.parse(event.data)\n            //let data = event.data\n            //let data2 = this.date_format(data1.created)+\" Join: \" + data1.user + \"\\n\"\n            let data3 = <li> {this.date_format(data1.created)} Join {data1.user}</li>\n          // Update the set of users\n          // Show the message in the history\n          this.setState({\n            users: Array.from(new Set (this.state.users.concat(data1.user))).map(u => u),\n            messages: this.state.messages.concat(data3)\n          })\n        },\n        false\n    )\n\n    this.server.addEventListener(\n        'Part',\n        event => {\n          console.log(\"PART EVENT\")\n          let data = JSON.parse(event.data)\n            console.log(\"Left : \" + data.user)\n          //let message = \"Part: \" + data.user\n            let message = this.date_format(data.created)+\" Part \"+data.user\n          // Update the set of users\n          // Show the message in the history\n          this.setState({\n            users: this.state.users.filter(item => item !== data.user).map(u => u),\n            messages: this.state.messages.concat(message)\n          })\n        },\n        false\n    )\n\n    this.server.addEventListener(\n        'Message',\n        event => {\n            console.log(\"Message EVENT\")\n            let event_message = JSON.parse(event.data)\n            // Update the set of users\n            // Show the message in the history\n            let message = event_message.message\n            let username = event_message.user\n            let created = this.date_format(event_message.created)\n            console.log(\"HEY\")\n            console.log(message)\n            console.log(username)\n            console.log(created)\n            let new_message = <li> {created} User: {username} says: {message}</li>\n\n          this.setState({\n            messages: this.state.messages.concat(new_message)\n          })\n        },\n        false\n    )\n\n    this.server.addEventListener(\n        'Disconnect',\n        event => {\n          //TODO\n          console.log(\"Message EVENT\")\n          let message = event.data\n\n          // Update the set of users\n          // Show the message in the history\n          this.setState({\n            messages: [],\n            message_token: \"\",\n            stream_token: \"\",\n            path: \"\",\n            Logged: false\n          })\n\n          this.server.close()\n        },\n        false\n    )\n\n    this.server.addEventListener(\n        'ServerStatus',\n        event => {\n          //TODO\n            console.log(\"Message EVENT\")\n            let data1 = JSON.parse(event.data)\n            //let data = event.data\n            //let data2 = this.date_format(data1.created)+\" Join: \" + data1.user + \"\\n\"\n            let data3 = <li> {this.date_format(data1.created)} Status {data1.status}</li>\n            // Update the set of users\n            // Show the message in the history\n            this.setState({\n            messages: this.state.messages.concat(data3)\n          })\n        },\n        false\n    )\n  }\n\n\n\n\n  date_format = timestamp => {\n    var date = new Date(timestamp * 1000)\n    return (\n        date.toLocaleDateString('en-US') + ' ' + date.toLocaleTimeString('en-US')\n    )\n  }\n\n  render() {\n    var toRender = \"\"\n    if(this.state.Logged){\n      toRender = <><Users users={this.state.users}></Users>\n          <Messages messages={this.state.messages}></Messages>\n          <Compose changeToken={this.updateMessageToken} token={this.state.message_token}\n                   path={this.state.path}></Compose>\n      </>;\n    } else {\n      toRender =         <LoginModal                     updateMessageToken={this.updateMessageToken}\n                                                         updateStreamToken={this.updateStreamToken}\n                                                         updateServer={this.updateServer}\n                                                         updateLoggedState={this.updateLoggedState}\n                                                          updatePath={this.updatePath}>\n      </LoginModal>\n    }\n    return (\n      <div className=\"App\">\n        {toRender}\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}